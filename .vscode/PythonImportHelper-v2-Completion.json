[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "parameters",
        "description": "parameters",
        "isExtraImport": true,
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "parameters",
        "description": "parameters",
        "isExtraImport": true,
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "parameters",
        "description": "parameters",
        "isExtraImport": true,
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "parameters",
        "description": "parameters",
        "isExtraImport": true,
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "parameters",
        "description": "parameters",
        "isExtraImport": true,
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "parameters",
        "description": "parameters",
        "isExtraImport": true,
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "parameters",
        "description": "parameters",
        "isExtraImport": true,
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "board",
        "description": "board",
        "isExtraImport": true,
        "detail": "board",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "board",
        "description": "board",
        "isExtraImport": true,
        "detail": "board",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "board",
        "description": "board",
        "isExtraImport": true,
        "detail": "board",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "board",
        "description": "board",
        "isExtraImport": true,
        "detail": "board",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "board",
        "description": "board",
        "isExtraImport": true,
        "detail": "board",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "board",
        "description": "board",
        "isExtraImport": true,
        "detail": "board",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "QuiescentEngine",
        "importPath": "quiescentengine",
        "description": "quiescentengine",
        "isExtraImport": true,
        "detail": "quiescentengine",
        "documentation": {}
    },
    {
        "label": "QuiescentEngine",
        "importPath": "quiescentengine",
        "description": "quiescentengine",
        "isExtraImport": true,
        "detail": "quiescentengine",
        "documentation": {}
    },
    {
        "label": "QuiescentEngine",
        "importPath": "quiescentengine",
        "description": "quiescentengine",
        "isExtraImport": true,
        "detail": "quiescentengine",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "SmartEngine",
        "importPath": "smartengine",
        "description": "smartengine",
        "isExtraImport": true,
        "detail": "smartengine",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "enginewithtt",
        "description": "enginewithtt",
        "isExtraImport": true,
        "detail": "enginewithtt",
        "documentation": {}
    },
    {
        "label": "getvalue",
        "importPath": "enginewithtt",
        "description": "enginewithtt",
        "isExtraImport": true,
        "detail": "enginewithtt",
        "documentation": {}
    },
    {
        "label": "getvalue",
        "importPath": "enginewithtt",
        "description": "enginewithtt",
        "isExtraImport": true,
        "detail": "enginewithtt",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Board",
        "kind": 6,
        "importPath": "board",
        "description": "board",
        "peekOfCode": "class Board:\n    def __init__(self) -> None:\n        self.player = WHITE\n        self.white_pieces = set({(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7),(0,8),(1,1),(1,7),(2,2),(2,6),(3,3),(3,5)})\n        self.black_pieces = set({(8,0),(8,1),(8,2),(8,3),(8,4),(8,5),(8,6),(8,7),(8,8),(7,1),(7,7),(6,2),(6,6),(5,3),(5,5)})\n        np.random.seed(420)\n        self.zobrist = ZOBRIST_ARRAY\n        self.zobrist_player = ZOBRIST_PLAYER\n    def generate_moves_unordered(self, player):\n        moves, capture = [], False",
        "detail": "board",
        "documentation": {}
    },
    {
        "label": "add_tuples",
        "kind": 2,
        "importPath": "board",
        "description": "board",
        "peekOfCode": "def add_tuples(t1, t2):\n    return tuple(map(sum, zip(t1, t2)))",
        "detail": "board",
        "documentation": {}
    },
    {
        "label": "Engine",
        "kind": 6,
        "importPath": "enginewithtt",
        "description": "enginewithtt",
        "peekOfCode": "class Engine():\n    def __init__(self, board, player,feature_set, transposition_table_size = 28) -> None:\n        self.board = board\n        self.player = player\n        self.player_at_turn = player\n        self.tt = np.zeros((2 ** transposition_table_size, 2), dtype=np.uint64)  # 64-bit entry: |depth (4)|flag (3)|sign (1)|value (40)|move (16)|\n        self.nodes = self.depth = 0\n        self.mask = (1 << transposition_table_size) - 1 \n        self.fiancobonus = feature_set[\"FIANCO_BONUS\"]\n        self.positionalbonus = feature_set[\"POSITIONAL_BONUS\"]",
        "detail": "enginewithtt",
        "documentation": {}
    },
    {
        "label": "getvalue",
        "kind": 2,
        "importPath": "enginewithtt",
        "description": "enginewithtt",
        "peekOfCode": "def getvalue(ttvalue_packed):\n    return -((ttvalue_packed >> 16) & 0xFFFFFFFFFF) if (ttvalue_packed >> 56) & 0x1 else (ttvalue_packed >> 16) & 0xFFFFFFFFFF",
        "detail": "enginewithtt",
        "documentation": {}
    },
    {
        "label": "draw_grid",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def draw_grid():\n    # Draw the grid lines\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, y), (MARGIN + BOARD_SIZE * CELL_SIZE, y), 2)\n    # Draw cell labels (like 'a9', 'b8', etc.)\n    for row in range(BOARD_SIZE):\n        for col in range(BOARD_SIZE):\n            cell_name = get_cell_name(row, col)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_cell_name",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_cell_name(row, col):\n    # Convert 0-indexed row/col to board coordinates (like 'a9', 'b8', etc.)\n    column_letter = chr(ord('a') + col)  # Converts 0 to 'a', 1 to 'b', ..., 8 to 'i'\n    row_number = 9 - row  # Converts 0 to 9, 1 to 8, ..., 8 to 1\n    return f\"{column_letter}{row_number}\"\ndef draw_labels():\n    for i in range(BOARD_SIZE):\n        screen.blit(font.render(LETTERS[i], True, BLACK_COLOR), (i * CELL_SIZE + MARGIN, FONT_SIZE  ))\n        screen.blit(font2.render(str(i + 1), True, BLACK_COLOR), (10, MARGIN + i * CELL_SIZE))\n    player_message = f\"Player {chessboard.player}'s turn\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "draw_labels",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def draw_labels():\n    for i in range(BOARD_SIZE):\n        screen.blit(font.render(LETTERS[i], True, BLACK_COLOR), (i * CELL_SIZE + MARGIN, FONT_SIZE  ))\n        screen.blit(font2.render(str(i + 1), True, BLACK_COLOR), (10, MARGIN + i * CELL_SIZE))\n    player_message = f\"Player {chessboard.player}'s turn\"\n    screen.blit(font.render(player_message, True, BLACK_COLOR), (WIDTH // 2 - FONT_SIZE, HEIGHT - FONT_SIZE - 10))\n    global engine\n    valueblack = engine.evaluation_function(WHITE)\n    valuewhite= -valueblack\n    values = f\"White: {valuewhite} Black: {valueblack}\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "show_last_moves",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def show_last_moves():\n    start, end = previous_moves[-1]\n    pygame.draw.circle(screen, RED_COLOR, \n                        (start[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, start[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                        CELL_SIZE // 2 - 25)\n    pygame.draw.circle(screen, RED_COLOR, \n                        (end[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, end[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                        CELL_SIZE // 2 - 25)\ndef draw_pieces():\n    for pos in chessboard.white_pieces:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "draw_pieces",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def draw_pieces():\n    for pos in chessboard.white_pieces:\n        pygame.draw.circle(screen, WHITE_COLOR, \n                           (pos[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, pos[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 10)\n    for pos in chessboard.black_pieces:\n        pygame.draw.circle(screen, BLACK_COLOR, \n                           (pos[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, pos[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 10)\ndef draw_moves():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "draw_moves",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def draw_moves():\n    legal_moves = list(chessboard.generate_moves(chessboard.player))\n    if selected_piece:\n        pygame.draw.circle(screen, (255, 0, 0), \n                           (selected_piece[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, selected_piece[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 10)\n    for move in legal_moves:\n        pygame.draw.circle(screen, (0, 255, 0), \n                           (move[3] * CELL_SIZE + MARGIN + CELL_SIZE // 2, move[2] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 25)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_cell_at_position",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_cell_at_position(pos):\n    x = (pos[0] - MARGIN) // CELL_SIZE\n    y = (pos[1] - MARGIN) // CELL_SIZE\n    return (y, x) if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE else None\ndef reset_game():\n    global chessboard, selected_piece, game_over\n    chessboard = Board()\n    engine = ImprovedEngine(chessboard, 2)\n    selected_piece = None\n    game_over = False",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "reset_game",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def reset_game():\n    global chessboard, selected_piece, game_over\n    chessboard = Board()\n    engine = ImprovedEngine(chessboard, 2)\n    selected_piece = None\n    game_over = False\ndef check_game_over():\n    return chessboard.checkwin()\ndef move_piece(from_pos, to_pos):\n    if chessboard.movecheck(chessboard.player, from_pos[0],from_pos[1], to_pos[0], to_pos[1]):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check_game_over",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check_game_over():\n    return chessboard.checkwin()\ndef move_piece(from_pos, to_pos):\n    if chessboard.movecheck(chessboard.player, from_pos[0],from_pos[1], to_pos[0], to_pos[1]):\n        previous_moves.append((from_pos, to_pos))\ndef handle_input():\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_BACKSPACE]:  # Restart the game on Backspace\n        reset_game()\n        return",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "move_piece",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def move_piece(from_pos, to_pos):\n    if chessboard.movecheck(chessboard.player, from_pos[0],from_pos[1], to_pos[0], to_pos[1]):\n        previous_moves.append((from_pos, to_pos))\ndef handle_input():\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_BACKSPACE]:  # Restart the game on Backspace\n        reset_game()\n        return\n    if selected_piece:\n        move_directions = {",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "handle_input",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def handle_input():\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_BACKSPACE]:  # Restart the game on Backspace\n        reset_game()\n        return\n    if selected_piece:\n        move_directions = {\n            1: [(pygame.K_UP, (-1, 0)), (pygame.K_DOWN, (1, 0)), (pygame.K_LEFT, (0, -1)), (pygame.K_RIGHT, (0, 1))],\n            2: [(pygame.K_w, (-1, 0)), (pygame.K_s, (1, 0)), (pygame.K_a, (0, -1)), (pygame.K_d, (0, 1))]\n        }",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main_game_loop",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main_game_loop():\n    global game_over, selected_piece, engine, previous_moves\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == pygame.MOUSEBUTTONDOWN and not game_over and chessboard.player == 3 - PLAYER:\n                pos = pygame.mouse.get_pos()\n                cell = get_cell_at_position(pos)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "WHITE_COLOR",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "WHITE_COLOR = (255, 255, 255)\nBLACK_COLOR = (0, 0, 0)\nGREY = (200, 200, 200)\nRED_COLOR = (255, 0, 0)\n# Initialize pygame and screen dimensions\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "BLACK_COLOR",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "BLACK_COLOR = (0, 0, 0)\nGREY = (200, 200, 200)\nRED_COLOR = (255, 0, 0)\n# Initialize pygame and screen dimensions\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "GREY",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "GREY = (200, 200, 200)\nRED_COLOR = (255, 0, 0)\n# Initialize pygame and screen dimensions\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\nPLAYER = BLACK",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "RED_COLOR",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "RED_COLOR = (255, 0, 0)\n# Initialize pygame and screen dimensions\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\nPLAYER = BLACK\n# Initialize game state",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "screen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\nPLAYER = BLACK\n# Initialize game state\nchessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "font = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\nPLAYER = BLACK\n# Initialize game state\nchessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "font2",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "font2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\nPLAYER = BLACK\n# Initialize game state\nchessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "clock = pygame.time.Clock()\nPLAYER = BLACK\n# Initialize game state\nchessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "PLAYER",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "PLAYER = BLACK\n# Initialize game state\nchessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "chessboard",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "chessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\ndef draw_grid():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "engine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\ndef draw_grid():\n    # Draw the grid lines",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "selected_piece",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "selected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\ndef draw_grid():\n    # Draw the grid lines\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "game_over",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "game_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\ndef draw_grid():\n    # Draw the grid lines\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "black_time",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "black_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\ndef draw_grid():\n    # Draw the grid lines\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "white_time",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "white_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\ndef draw_grid():\n    # Draw the grid lines\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, y), (MARGIN + BOARD_SIZE * CELL_SIZE, y), 2)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "previous_moves",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "previous_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\ndef draw_grid():\n    # Draw the grid lines\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, y), (MARGIN + BOARD_SIZE * CELL_SIZE, y), 2)\n    # Draw cell labels (like 'a9', 'b8', etc.)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "total_nodes_visited",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "total_nodes_visited = 0\ntotal_hits = 0\ndef draw_grid():\n    # Draw the grid lines\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, y), (MARGIN + BOARD_SIZE * CELL_SIZE, y), 2)\n    # Draw cell labels (like 'a9', 'b8', etc.)\n    for row in range(BOARD_SIZE):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "total_hits",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "total_hits = 0\ndef draw_grid():\n    # Draw the grid lines\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, y), (MARGIN + BOARD_SIZE * CELL_SIZE, y), 2)\n    # Draw cell labels (like 'a9', 'b8', etc.)\n    for row in range(BOARD_SIZE):\n        for col in range(BOARD_SIZE):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "defaultdict_in_json",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def defaultdict_in_json(defaultdict_obj, file_path):\n    dict_con_chiavi_str = {str(k): v for k, v in defaultdict_obj.items()}\n    with open(file_path, 'w') as file:\n        json.dump(dict_con_chiavi_str, file, indent=4)\ndef init_grid_labels():\n    for row in range(BOARD_SIZE):\n        for col in range(BOARD_SIZE):\n            cell_name = get_cell_name(row, col)\n            text = font.render(cell_name, True, BLACK_COLOR)\n            text_rect = text.get_rect(center=(MARGIN + col * CELL_SIZE + CELL_SIZE // 2, ",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "init_grid_labels",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def init_grid_labels():\n    for row in range(BOARD_SIZE):\n        for col in range(BOARD_SIZE):\n            cell_name = get_cell_name(row, col)\n            text = font.render(cell_name, True, BLACK_COLOR)\n            text_rect = text.get_rect(center=(MARGIN + col * CELL_SIZE + CELL_SIZE // 2, \n                                              MARGIN + row * CELL_SIZE + CELL_SIZE // 2))\n            grid_labels[row][col] = (text, text_rect)\ndef draw_grid():\n    for i in range(BOARD_SIZE + 1):",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "draw_grid",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def draw_grid():\n    for i in range(BOARD_SIZE + 1):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN + i * CELL_SIZE, MARGIN), \n                         (MARGIN + i * CELL_SIZE, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, MARGIN + i * CELL_SIZE), \n                         (MARGIN + BOARD_SIZE * CELL_SIZE, MARGIN + i * CELL_SIZE), 2)\n    for row in range(BOARD_SIZE):\n        for col in range(BOARD_SIZE):\n            text, text_rect = grid_labels[row][col]\n            screen.blit(text, text_rect)",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "show_last_moves",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def show_last_moves():\n    start, end = previous_moves[-1]\n    pygame.draw.circle(screen, RED_COLOR, \n                        (start[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, start[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                        CELL_SIZE // 2 - 25)\n    pygame.draw.circle(screen, RED_COLOR, \n                        (end[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, end[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                        CELL_SIZE // 2 - 25)\ndef get_cell_name(row, col):\n    # Convert 0-indexed row/col to board coordinates (like 'a9', 'b8', etc.)",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "get_cell_name",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def get_cell_name(row, col):\n    # Convert 0-indexed row/col to board coordinates (like 'a9', 'b8', etc.)\n    column_letter = chr(ord('a') + col)  # Converts 0 to 'a', 1 to 'b', ..., 8 to 'i'\n    row_number = 9 - row  # Converts 0 to 9, 1 to 8, ..., 8 to 1\n    return f\"{column_letter}{row_number}\"\ndef draw_labels():\n    global total_nodes_visited, depth\n    for i in range(BOARD_SIZE):\n        screen.blit(font.render(LETTERS[i], True, BLACK_COLOR), (i * CELL_SIZE + MARGIN, FONT_SIZE  ))\n        screen.blit(font2.render(str(i + 1), True, BLACK_COLOR), (10, MARGIN + i * CELL_SIZE))",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "draw_labels",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def draw_labels():\n    global total_nodes_visited, depth\n    for i in range(BOARD_SIZE):\n        screen.blit(font.render(LETTERS[i], True, BLACK_COLOR), (i * CELL_SIZE + MARGIN, FONT_SIZE  ))\n        screen.blit(font2.render(str(i + 1), True, BLACK_COLOR), (10, MARGIN + i * CELL_SIZE))\n    player_message = f\"Player {chessboard.player}'s turn\"\n    screen.blit(font.render(player_message, True, BLACK_COLOR), (WIDTH // 2 - FONT_SIZE, HEIGHT - FONT_SIZE - 10))\n    global engine\n    nodes = f\"Nodes  b/w: {engine.nodes}, {engine.nodes}\"\n    movetimes = f\"Move times b/w: {round(sum(white_time),2)}, {round(sum(black_time),2)}\"",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "draw_pieces",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def draw_pieces():\n    for pos in chessboard.white_pieces:\n        pygame.draw.circle(screen, WHITE_COLOR, \n                           (pos[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, pos[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 10)\n    for pos in chessboard.black_pieces:\n        pygame.draw.circle(screen, BLACK_COLOR, \n                           (pos[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, pos[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 10)\ndef draw_moves():",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "draw_moves",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def draw_moves():\n    legal_moves = chessboard.generate_moves_unordered(chessboard.player)\n    if selected_piece:\n        pygame.draw.circle(screen, (255, 0, 0), \n                           (selected_piece[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, selected_piece[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 10)\n    for move in legal_moves:\n        pygame.draw.circle(screen, (0, 255, 0), \n                           (move[3] * CELL_SIZE + MARGIN + CELL_SIZE // 2, move[2] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 25)",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "get_cell_at_position",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def get_cell_at_position(pos):\n    x = (pos[0] - MARGIN) // CELL_SIZE\n    y = (pos[1] - MARGIN) // CELL_SIZE\n    return (y, x) if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE else None\ndef reset_game():\n    global chessboard, selected_piece, game_over\n    chessboard = Board()\n    engine = ImprovedEngine(chessboard, 2)\n    selected_piece = None\n    game_over = False",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "reset_game",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def reset_game():\n    global chessboard, selected_piece, game_over\n    chessboard = Board()\n    engine = ImprovedEngine(chessboard, 2)\n    selected_piece = None\n    game_over = False\ndef check_game_over():\n    return chessboard.checkwin()\ndef move_piece(from_pos, to_pos):\n    chessboard.movecheck(chessboard.player, from_pos[0],from_pos[1], to_pos[0], to_pos[1])",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "check_game_over",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def check_game_over():\n    return chessboard.checkwin()\ndef move_piece(from_pos, to_pos):\n    chessboard.movecheck(chessboard.player, from_pos[0],from_pos[1], to_pos[0], to_pos[1])\n    previous_moves.append((from_pos, to_pos))\ndef handle_input():\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_BACKSPACE]:  # Restart the game on Backspace\n        reset_game()\n        return",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "move_piece",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def move_piece(from_pos, to_pos):\n    chessboard.movecheck(chessboard.player, from_pos[0],from_pos[1], to_pos[0], to_pos[1])\n    previous_moves.append((from_pos, to_pos))\ndef handle_input():\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_BACKSPACE]:  # Restart the game on Backspace\n        reset_game()\n        return\n    if selected_piece:\n        move_directions = {",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "handle_input",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def handle_input():\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_BACKSPACE]:  # Restart the game on Backspace\n        reset_game()\n        return\n    if selected_piece:\n        move_directions = {\n            1: [(pygame.K_UP, (-1, 0)), (pygame.K_DOWN, (1, 0)), (pygame.K_LEFT, (0, -1)), (pygame.K_RIGHT, (0, 1))],\n            2: [(pygame.K_w, (-1, 0)), (pygame.K_s, (1, 0)), (pygame.K_a, (0, -1)), (pygame.K_d, (0, 1))]\n        }",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "main_game_loop",
        "kind": 2,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "def main_game_loop():\n    global game_over, selected_piece, engine, previous_moves, backgroundsearch, depth, total_nodes_visited, turn\n    init_grid_labels()\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                defaultdict_in_json(engine.history_heuristic, 'historyheuristicexit.json')\n                pygame.quit()\n                sys.exit()\n            elif event.type == pygame.MOUSEBUTTONDOWN and not game_over and chessboard.player == 3 - PLAYER:",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "WHITE_COLOR",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "WHITE_COLOR = (255, 255, 255)\nBLACK_COLOR = (0, 0, 0)\nGREY = (200, 200, 200)\nRED_COLOR = (255, 0, 0)\n# Initialize pygame and screen dimensions\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "BLACK_COLOR",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "BLACK_COLOR = (0, 0, 0)\nGREY = (200, 200, 200)\nRED_COLOR = (255, 0, 0)\n# Initialize pygame and screen dimensions\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "GREY",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "GREY = (200, 200, 200)\nRED_COLOR = (255, 0, 0)\n# Initialize pygame and screen dimensions\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\nPLAYER = BLACK",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "RED_COLOR",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "RED_COLOR = (255, 0, 0)\n# Initialize pygame and screen dimensions\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\nPLAYER = BLACK\n# Initialize game state",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "screen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\nPLAYER = BLACK\n# Initialize game state\nchessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "font = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\nPLAYER = BLACK\n# Initialize game state\nchessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "font2",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "font2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\nPLAYER = BLACK\n# Initialize game state\nchessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "clock = pygame.time.Clock()\nPLAYER = BLACK\n# Initialize game state\nchessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "PLAYER",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "PLAYER = BLACK\n# Initialize game state\nchessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "chessboard",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "chessboard = Board()\nengine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\nbackgroundsearch = None",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "engine = ImprovedEngine(chessboard, PLAYER, transposition_table_size=28)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\nbackgroundsearch = None\ndepth = 0",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "selected_piece",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "selected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\nbackgroundsearch = None\ndepth = 0\ngrid_labels = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "game_over",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "game_over = False\nblack_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\nbackgroundsearch = None\ndepth = 0\ngrid_labels = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]\nturn = 0",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "black_time",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "black_time = []\nwhite_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\nbackgroundsearch = None\ndepth = 0\ngrid_labels = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]\nturn = 0\ndef defaultdict_in_json(defaultdict_obj, file_path):",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "white_time",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "white_time = []\nprevious_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\nbackgroundsearch = None\ndepth = 0\ngrid_labels = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]\nturn = 0\ndef defaultdict_in_json(defaultdict_obj, file_path):\n    dict_con_chiavi_str = {str(k): v for k, v in defaultdict_obj.items()}",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "previous_moves",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "previous_moves = []\ntotal_nodes_visited = 0\ntotal_hits = 0\nbackgroundsearch = None\ndepth = 0\ngrid_labels = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]\nturn = 0\ndef defaultdict_in_json(defaultdict_obj, file_path):\n    dict_con_chiavi_str = {str(k): v for k, v in defaultdict_obj.items()}\n    with open(file_path, 'w') as file:",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "total_nodes_visited",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "total_nodes_visited = 0\ntotal_hits = 0\nbackgroundsearch = None\ndepth = 0\ngrid_labels = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]\nturn = 0\ndef defaultdict_in_json(defaultdict_obj, file_path):\n    dict_con_chiavi_str = {str(k): v for k, v in defaultdict_obj.items()}\n    with open(file_path, 'w') as file:\n        json.dump(dict_con_chiavi_str, file, indent=4)",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "total_hits",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "total_hits = 0\nbackgroundsearch = None\ndepth = 0\ngrid_labels = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]\nturn = 0\ndef defaultdict_in_json(defaultdict_obj, file_path):\n    dict_con_chiavi_str = {str(k): v for k, v in defaultdict_obj.items()}\n    with open(file_path, 'w') as file:\n        json.dump(dict_con_chiavi_str, file, indent=4)\ndef init_grid_labels():",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "backgroundsearch",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "backgroundsearch = None\ndepth = 0\ngrid_labels = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]\nturn = 0\ndef defaultdict_in_json(defaultdict_obj, file_path):\n    dict_con_chiavi_str = {str(k): v for k, v in defaultdict_obj.items()}\n    with open(file_path, 'w') as file:\n        json.dump(dict_con_chiavi_str, file, indent=4)\ndef init_grid_labels():\n    for row in range(BOARD_SIZE):",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "depth",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "depth = 0\ngrid_labels = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]\nturn = 0\ndef defaultdict_in_json(defaultdict_obj, file_path):\n    dict_con_chiavi_str = {str(k): v for k, v in defaultdict_obj.items()}\n    with open(file_path, 'w') as file:\n        json.dump(dict_con_chiavi_str, file, indent=4)\ndef init_grid_labels():\n    for row in range(BOARD_SIZE):\n        for col in range(BOARD_SIZE):",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "grid_labels",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "grid_labels = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]\nturn = 0\ndef defaultdict_in_json(defaultdict_obj, file_path):\n    dict_con_chiavi_str = {str(k): v for k, v in defaultdict_obj.items()}\n    with open(file_path, 'w') as file:\n        json.dump(dict_con_chiavi_str, file, indent=4)\ndef init_grid_labels():\n    for row in range(BOARD_SIZE):\n        for col in range(BOARD_SIZE):\n            cell_name = get_cell_name(row, col)",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "turn",
        "kind": 5,
        "importPath": "main1",
        "description": "main1",
        "peekOfCode": "turn = 0\ndef defaultdict_in_json(defaultdict_obj, file_path):\n    dict_con_chiavi_str = {str(k): v for k, v in defaultdict_obj.items()}\n    with open(file_path, 'w') as file:\n        json.dump(dict_con_chiavi_str, file, indent=4)\ndef init_grid_labels():\n    for row in range(BOARD_SIZE):\n        for col in range(BOARD_SIZE):\n            cell_name = get_cell_name(row, col)\n            text = font.render(cell_name, True, BLACK_COLOR)",
        "detail": "main1",
        "documentation": {}
    },
    {
        "label": "draw_grid",
        "kind": 2,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "def draw_grid():\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, y), (MARGIN + BOARD_SIZE * CELL_SIZE, y), 2)\ndef draw_labels():\n    for i in range(BOARD_SIZE):\n        screen.blit(font.render(LETTERS[i], True, BLACK_COLOR), (i * CELL_SIZE + MARGIN, FONT_SIZE  ))\n        screen.blit(font2.render(str(i + 1), True, BLACK_COLOR), (10, MARGIN + i * CELL_SIZE))\n    player_message = f\"Player {chessboard.player}'s turn\"",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "draw_labels",
        "kind": 2,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "def draw_labels():\n    for i in range(BOARD_SIZE):\n        screen.blit(font.render(LETTERS[i], True, BLACK_COLOR), (i * CELL_SIZE + MARGIN, FONT_SIZE  ))\n        screen.blit(font2.render(str(i + 1), True, BLACK_COLOR), (10, MARGIN + i * CELL_SIZE))\n    player_message = f\"Player {chessboard.player}'s turn\"\n    screen.blit(font.render(player_message, True, BLACK_COLOR), (WIDTH // 2 - FONT_SIZE, HEIGHT - FONT_SIZE - 10))\n    global engine, engine1\n    valueblack = engine.evaluation_function(BLACK)\n    valuewhite= -valueblack\n    values = f\"Values b/w: {valuewhite}, {valueblack}\"",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "draw_pieces",
        "kind": 2,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "def draw_pieces():\n    for pos in chessboard.white_pieces:\n        pygame.draw.circle(screen, WHITE_COLOR, \n                           (pos[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, pos[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 10)\n    for pos in chessboard.black_pieces:\n        pygame.draw.circle(screen, BLACK_COLOR, \n                           (pos[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, pos[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 10)\ndef draw_moves():",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "draw_moves",
        "kind": 2,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "def draw_moves():\n    legal_moves = chessboard.generate_moves_unordered(chessboard.player)\n    if selected_piece:\n        pygame.draw.circle(screen, (255, 0, 0), \n                           (selected_piece[1] * CELL_SIZE + MARGIN + CELL_SIZE // 2, selected_piece[0] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 10)\n    for move in legal_moves:\n        pygame.draw.circle(screen, (0, 255, 0), \n                           (move[3] * CELL_SIZE + MARGIN + CELL_SIZE // 2, move[2] * CELL_SIZE + MARGIN + CELL_SIZE // 2), \n                           CELL_SIZE // 2 - 25)",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "get_cell_at_position",
        "kind": 2,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "def get_cell_at_position(pos):\n    x = (pos[0] - MARGIN) // CELL_SIZE\n    y = (pos[1] - MARGIN) // CELL_SIZE\n    return (y, x) if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE else None\ndef reset_game():\n    global chessboard, selected_piece, game_over, engine, engine1\n    chessboard = Board()\n    fs = engine.feature_set\n    fs1 = engine1.feature_set\n    engine = ImprovedEngine(chessboard, 2, 24)",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "reset_game",
        "kind": 2,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "def reset_game():\n    global chessboard, selected_piece, game_over, engine, engine1\n    chessboard = Board()\n    fs = engine.feature_set\n    fs1 = engine1.feature_set\n    engine = ImprovedEngine(chessboard, 2, 24)\n    engine1 = ImprovedEngine(chessboard, 1, 24)\n    selected_piece = None\n    game_over = False\ndef check_game_over():",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "check_game_over",
        "kind": 2,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "def check_game_over():\n    return chessboard.checkwin()\ndef move_piece(from_pos, to_pos):\n    chessboard.movecheck(chessboard.player, from_pos[0],from_pos[1], to_pos[0], to_pos[1])\ndef handle_input():\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_BACKSPACE]:  # Restart the game on Backspace\n        reset_game()\n        return\n    if selected_piece:",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "move_piece",
        "kind": 2,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "def move_piece(from_pos, to_pos):\n    chessboard.movecheck(chessboard.player, from_pos[0],from_pos[1], to_pos[0], to_pos[1])\ndef handle_input():\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_BACKSPACE]:  # Restart the game on Backspace\n        reset_game()\n        return\n    if selected_piece:\n        move_directions = {\n            1: [(pygame.K_UP, (-1, 0)), (pygame.K_DOWN, (1, 0)), (pygame.K_LEFT, (0, -1)), (pygame.K_RIGHT, (0, 1))],",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "handle_input",
        "kind": 2,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "def handle_input():\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_BACKSPACE]:  # Restart the game on Backspace\n        reset_game()\n        return\n    if selected_piece:\n        move_directions = {\n            1: [(pygame.K_UP, (-1, 0)), (pygame.K_DOWN, (1, 0)), (pygame.K_LEFT, (0, -1)), (pygame.K_RIGHT, (0, 1))],\n            2: [(pygame.K_w, (-1, 0)), (pygame.K_s, (1, 0)), (pygame.K_a, (0, -1)), (pygame.K_d, (0, 1))]\n        }",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "main_game_loop",
        "kind": 2,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "def main_game_loop():\n    global game_over, selected_piece\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            elif event.type == pygame.MOUSEBUTTONDOWN and not game_over and chessboard.player == 6:\n                pos = pygame.mouse.get_pos()\n                cell = get_cell_at_position(pos)",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "WHITE_COLOR",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "WHITE_COLOR = (255, 255, 255)\nBLACK_COLOR = (0, 0, 0)\nGREY = (200, 200, 200)\n# Initialize pygame and screen dimensions\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "BLACK_COLOR",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "BLACK_COLOR = (0, 0, 0)\nGREY = (200, 200, 200)\n# Initialize pygame and screen dimensions\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\n# Initialize game state",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "GREY",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "GREY = (200, 200, 200)\n# Initialize pygame and screen dimensions\npygame.init()\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\n# Initialize game state\nchessboard = Board()",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "screen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"FIANCO\")\nfont = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\n# Initialize game state\nchessboard = Board()\n#engine = Engine(chessboard, 1)\nengine = ImprovedEngine(chessboard, 2, transposition_table_size=24)\nengine1 = ImprovedEngine(chessboard, 1, transposition_table_size=24)",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "font = pygame.font.SysFont(None, FONT_SIZE)\nfont2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\n# Initialize game state\nchessboard = Board()\n#engine = Engine(chessboard, 1)\nengine = ImprovedEngine(chessboard, 2, transposition_table_size=24)\nengine1 = ImprovedEngine(chessboard, 1, transposition_table_size=24)\nselected_piece = None\ngame_over = False",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "font2",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "font2 = pygame.font.SysFont(None, FONT_SIZE // 2)\nclock = pygame.time.Clock()\n# Initialize game state\nchessboard = Board()\n#engine = Engine(chessboard, 1)\nengine = ImprovedEngine(chessboard, 2, transposition_table_size=24)\nengine1 = ImprovedEngine(chessboard, 1, transposition_table_size=24)\nselected_piece = None\ngame_over = False\nblack_time = []",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "clock = pygame.time.Clock()\n# Initialize game state\nchessboard = Board()\n#engine = Engine(chessboard, 1)\nengine = ImprovedEngine(chessboard, 2, transposition_table_size=24)\nengine1 = ImprovedEngine(chessboard, 1, transposition_table_size=24)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "chessboard",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "chessboard = Board()\n#engine = Engine(chessboard, 1)\nengine = ImprovedEngine(chessboard, 2, transposition_table_size=24)\nengine1 = ImprovedEngine(chessboard, 1, transposition_table_size=24)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\ndef draw_grid():\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "#engine",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "#engine = Engine(chessboard, 1)\nengine = ImprovedEngine(chessboard, 2, transposition_table_size=24)\nengine1 = ImprovedEngine(chessboard, 1, transposition_table_size=24)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\ndef draw_grid():\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "engine = ImprovedEngine(chessboard, 2, transposition_table_size=24)\nengine1 = ImprovedEngine(chessboard, 1, transposition_table_size=24)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\ndef draw_grid():\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "engine1",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "engine1 = ImprovedEngine(chessboard, 1, transposition_table_size=24)\nselected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\ndef draw_grid():\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, y), (MARGIN + BOARD_SIZE * CELL_SIZE, y), 2)",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "selected_piece",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "selected_piece = None\ngame_over = False\nblack_time = []\nwhite_time = []\ndef draw_grid():\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, y), (MARGIN + BOARD_SIZE * CELL_SIZE, y), 2)\ndef draw_labels():",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "game_over",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "game_over = False\nblack_time = []\nwhite_time = []\ndef draw_grid():\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, y), (MARGIN + BOARD_SIZE * CELL_SIZE, y), 2)\ndef draw_labels():\n    for i in range(BOARD_SIZE):",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "black_time",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "black_time = []\nwhite_time = []\ndef draw_grid():\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, y), (MARGIN + BOARD_SIZE * CELL_SIZE, y), 2)\ndef draw_labels():\n    for i in range(BOARD_SIZE):\n        screen.blit(font.render(LETTERS[i], True, BLACK_COLOR), (i * CELL_SIZE + MARGIN, FONT_SIZE  ))",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "white_time",
        "kind": 5,
        "importPath": "main2",
        "description": "main2",
        "peekOfCode": "white_time = []\ndef draw_grid():\n    for x in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (x, MARGIN), (x, MARGIN + BOARD_SIZE * CELL_SIZE), 2)\n    for y in range(MARGIN, MARGIN + BOARD_SIZE * CELL_SIZE + 1, CELL_SIZE):\n        pygame.draw.line(screen, BLACK_COLOR, (MARGIN, y), (MARGIN + BOARD_SIZE * CELL_SIZE, y), 2)\ndef draw_labels():\n    for i in range(BOARD_SIZE):\n        screen.blit(font.render(LETTERS[i], True, BLACK_COLOR), (i * CELL_SIZE + MARGIN, FONT_SIZE  ))\n        screen.blit(font2.render(str(i + 1), True, BLACK_COLOR), (10, MARGIN + i * CELL_SIZE))",
        "detail": "main2",
        "documentation": {}
    },
    {
        "label": "BOARD_SIZE",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "BOARD_SIZE = 9\nBLACK= 2\nWHITE = 1\nWHITE_PIECE = 1\nBLACK_PIECE = 2\n# Screen and Grid Sizes\nWIDTH, HEIGHT = 1200, 700\nMARGIN = 70\nGRID_SIZE = 500\nCELL_SIZE = GRID_SIZE // 8",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "WHITE = 1\nWHITE_PIECE = 1\nBLACK_PIECE = 2\n# Screen and Grid Sizes\nWIDTH, HEIGHT = 1200, 700\nMARGIN = 70\nGRID_SIZE = 500\nCELL_SIZE = GRID_SIZE // 8\nFONT_SIZE = 30\nBOARD_SIZE = 9",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "WHITE_PIECE",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "WHITE_PIECE = 1\nBLACK_PIECE = 2\n# Screen and Grid Sizes\nWIDTH, HEIGHT = 1200, 700\nMARGIN = 70\nGRID_SIZE = 500\nCELL_SIZE = GRID_SIZE // 8\nFONT_SIZE = 30\nBOARD_SIZE = 9\nLETTERS = \"ABCDEFGHI\"",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "BLACK_PIECE",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "BLACK_PIECE = 2\n# Screen and Grid Sizes\nWIDTH, HEIGHT = 1200, 700\nMARGIN = 70\nGRID_SIZE = 500\nCELL_SIZE = GRID_SIZE // 8\nFONT_SIZE = 30\nBOARD_SIZE = 9\nLETTERS = \"ABCDEFGHI\"\n# Value Limits",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "MARGIN",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "MARGIN = 70\nGRID_SIZE = 500\nCELL_SIZE = GRID_SIZE // 8\nFONT_SIZE = 30\nBOARD_SIZE = 9\nLETTERS = \"ABCDEFGHI\"\n# Value Limits\nMIN = 0\nMAX = 2**64 - 1\nR = 2",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "GRID_SIZE",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "GRID_SIZE = 500\nCELL_SIZE = GRID_SIZE // 8\nFONT_SIZE = 30\nBOARD_SIZE = 9\nLETTERS = \"ABCDEFGHI\"\n# Value Limits\nMIN = 0\nMAX = 2**64 - 1\nR = 2\n# Number of Players",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "CELL_SIZE",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "CELL_SIZE = GRID_SIZE // 8\nFONT_SIZE = 30\nBOARD_SIZE = 9\nLETTERS = \"ABCDEFGHI\"\n# Value Limits\nMIN = 0\nMAX = 2**64 - 1\nR = 2\n# Number of Players\nNUMBER_OF_PLAYERS = 2",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "FONT_SIZE",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "FONT_SIZE = 30\nBOARD_SIZE = 9\nLETTERS = \"ABCDEFGHI\"\n# Value Limits\nMIN = 0\nMAX = 2**64 - 1\nR = 2\n# Number of Players\nNUMBER_OF_PLAYERS = 2\n# Random Seed",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "BOARD_SIZE",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "BOARD_SIZE = 9\nLETTERS = \"ABCDEFGHI\"\n# Value Limits\nMIN = 0\nMAX = 2**64 - 1\nR = 2\n# Number of Players\nNUMBER_OF_PLAYERS = 2\n# Random Seed\nSEED = 420420",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "LETTERS",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "LETTERS = \"ABCDEFGHI\"\n# Value Limits\nMIN = 0\nMAX = 2**64 - 1\nR = 2\n# Number of Players\nNUMBER_OF_PLAYERS = 2\n# Random Seed\nSEED = 420420\nWINNING_WHITES = ((8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8))",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "MIN",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "MIN = 0\nMAX = 2**64 - 1\nR = 2\n# Number of Players\nNUMBER_OF_PLAYERS = 2\n# Random Seed\nSEED = 420420\nWINNING_WHITES = ((8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8))\nWINNING_BLACK = ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8))\nROW7 = ((7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8))",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "MAX",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "MAX = 2**64 - 1\nR = 2\n# Number of Players\nNUMBER_OF_PLAYERS = 2\n# Random Seed\nSEED = 420420\nWINNING_WHITES = ((8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8))\nWINNING_BLACK = ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8))\nROW7 = ((7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8))\nROW1 = ((1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8))",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "R = 2\n# Number of Players\nNUMBER_OF_PLAYERS = 2\n# Random Seed\nSEED = 420420\nWINNING_WHITES = ((8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8))\nWINNING_BLACK = ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8))\nROW7 = ((7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8))\nROW1 = ((1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8))\nROW2 = ((2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8))",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "NUMBER_OF_PLAYERS",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "NUMBER_OF_PLAYERS = 2\n# Random Seed\nSEED = 420420\nWINNING_WHITES = ((8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8))\nWINNING_BLACK = ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8))\nROW7 = ((7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8))\nROW1 = ((1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8))\nROW2 = ((2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8))\nROW6 = ((6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8))\nEXACT = 0",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "SEED",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "SEED = 420420\nWINNING_WHITES = ((8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8))\nWINNING_BLACK = ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8))\nROW7 = ((7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8))\nROW1 = ((1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8))\nROW2 = ((2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8))\nROW6 = ((6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8))\nEXACT = 0\nLOWERBOUND = 1\nUPPERBOUND = 2",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "WINNING_WHITES",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "WINNING_WHITES = ((8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8))\nWINNING_BLACK = ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8))\nROW7 = ((7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8))\nROW1 = ((1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8))\nROW2 = ((2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8))\nROW6 = ((6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8))\nEXACT = 0\nLOWERBOUND = 1\nUPPERBOUND = 2\nLATERAL_DIRECTIONS = {(0, -1), (0, 1)}",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "WINNING_BLACK",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "WINNING_BLACK = ((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8))\nROW7 = ((7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8))\nROW1 = ((1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8))\nROW2 = ((2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8))\nROW6 = ((6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8))\nEXACT = 0\nLOWERBOUND = 1\nUPPERBOUND = 2\nLATERAL_DIRECTIONS = {(0, -1), (0, 1)}\nFORWARD_DIRECTIONS = {WHITE: (1, 0), BLACK: (-1, 0)}",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "ROW7",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "ROW7 = ((7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8))\nROW1 = ((1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8))\nROW2 = ((2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8))\nROW6 = ((6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8))\nEXACT = 0\nLOWERBOUND = 1\nUPPERBOUND = 2\nLATERAL_DIRECTIONS = {(0, -1), (0, 1)}\nFORWARD_DIRECTIONS = {WHITE: (1, 0), BLACK: (-1, 0)}\nCAPTURED_PIECE_OFFSET = {WHITE: [(1, 1), (1, -1)], BLACK: [(-1, 1), (-1, -1)]}",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "ROW1",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "ROW1 = ((1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8))\nROW2 = ((2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8))\nROW6 = ((6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8))\nEXACT = 0\nLOWERBOUND = 1\nUPPERBOUND = 2\nLATERAL_DIRECTIONS = {(0, -1), (0, 1)}\nFORWARD_DIRECTIONS = {WHITE: (1, 0), BLACK: (-1, 0)}\nCAPTURED_PIECE_OFFSET = {WHITE: [(1, 1), (1, -1)], BLACK: [(-1, 1), (-1, -1)]}\nfeature_set1 = {\"FIANCO_BONUS\": 1,",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "ROW2",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "ROW2 = ((2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8))\nROW6 = ((6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8))\nEXACT = 0\nLOWERBOUND = 1\nUPPERBOUND = 2\nLATERAL_DIRECTIONS = {(0, -1), (0, 1)}\nFORWARD_DIRECTIONS = {WHITE: (1, 0), BLACK: (-1, 0)}\nCAPTURED_PIECE_OFFSET = {WHITE: [(1, 1), (1, -1)], BLACK: [(-1, 1), (-1, -1)]}\nfeature_set1 = {\"FIANCO_BONUS\": 1,\n                \"POSITIONAL_BONUS\": 2,",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "ROW6",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "ROW6 = ((6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8))\nEXACT = 0\nLOWERBOUND = 1\nUPPERBOUND = 2\nLATERAL_DIRECTIONS = {(0, -1), (0, 1)}\nFORWARD_DIRECTIONS = {WHITE: (1, 0), BLACK: (-1, 0)}\nCAPTURED_PIECE_OFFSET = {WHITE: [(1, 1), (1, -1)], BLACK: [(-1, 1), (-1, -1)]}\nfeature_set1 = {\"FIANCO_BONUS\": 1,\n                \"POSITIONAL_BONUS\": 2,\n                \"SECONDLASTBONUS\": 10,",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "EXACT",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "EXACT = 0\nLOWERBOUND = 1\nUPPERBOUND = 2\nLATERAL_DIRECTIONS = {(0, -1), (0, 1)}\nFORWARD_DIRECTIONS = {WHITE: (1, 0), BLACK: (-1, 0)}\nCAPTURED_PIECE_OFFSET = {WHITE: [(1, 1), (1, -1)], BLACK: [(-1, 1), (-1, -1)]}\nfeature_set1 = {\"FIANCO_BONUS\": 1,\n                \"POSITIONAL_BONUS\": 2,\n                \"SECONDLASTBONUS\": 10,\n                \"THIRDBONUS\": 5}",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "LOWERBOUND",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "LOWERBOUND = 1\nUPPERBOUND = 2\nLATERAL_DIRECTIONS = {(0, -1), (0, 1)}\nFORWARD_DIRECTIONS = {WHITE: (1, 0), BLACK: (-1, 0)}\nCAPTURED_PIECE_OFFSET = {WHITE: [(1, 1), (1, -1)], BLACK: [(-1, 1), (-1, -1)]}\nfeature_set1 = {\"FIANCO_BONUS\": 1,\n                \"POSITIONAL_BONUS\": 2,\n                \"SECONDLASTBONUS\": 10,\n                \"THIRDBONUS\": 5}\nnp.random.seed(420)",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "UPPERBOUND",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "UPPERBOUND = 2\nLATERAL_DIRECTIONS = {(0, -1), (0, 1)}\nFORWARD_DIRECTIONS = {WHITE: (1, 0), BLACK: (-1, 0)}\nCAPTURED_PIECE_OFFSET = {WHITE: [(1, 1), (1, -1)], BLACK: [(-1, 1), (-1, -1)]}\nfeature_set1 = {\"FIANCO_BONUS\": 1,\n                \"POSITIONAL_BONUS\": 2,\n                \"SECONDLASTBONUS\": 10,\n                \"THIRDBONUS\": 5}\nnp.random.seed(420)\nZOBRIST_ARRAY = np.random.randint(0, (2**63) -1, size=(BOARD_SIZE, BOARD_SIZE, 2), dtype=np.uint64)",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "LATERAL_DIRECTIONS",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "LATERAL_DIRECTIONS = {(0, -1), (0, 1)}\nFORWARD_DIRECTIONS = {WHITE: (1, 0), BLACK: (-1, 0)}\nCAPTURED_PIECE_OFFSET = {WHITE: [(1, 1), (1, -1)], BLACK: [(-1, 1), (-1, -1)]}\nfeature_set1 = {\"FIANCO_BONUS\": 1,\n                \"POSITIONAL_BONUS\": 2,\n                \"SECONDLASTBONUS\": 10,\n                \"THIRDBONUS\": 5}\nnp.random.seed(420)\nZOBRIST_ARRAY = np.random.randint(0, (2**63) -1, size=(BOARD_SIZE, BOARD_SIZE, 2), dtype=np.uint64)\nZOBRIST_PLAYER = np.random.randint(0, (2**63) -1, size=(2), dtype=np.uint64)",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "FORWARD_DIRECTIONS",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "FORWARD_DIRECTIONS = {WHITE: (1, 0), BLACK: (-1, 0)}\nCAPTURED_PIECE_OFFSET = {WHITE: [(1, 1), (1, -1)], BLACK: [(-1, 1), (-1, -1)]}\nfeature_set1 = {\"FIANCO_BONUS\": 1,\n                \"POSITIONAL_BONUS\": 2,\n                \"SECONDLASTBONUS\": 10,\n                \"THIRDBONUS\": 5}\nnp.random.seed(420)\nZOBRIST_ARRAY = np.random.randint(0, (2**63) -1, size=(BOARD_SIZE, BOARD_SIZE, 2), dtype=np.uint64)\nZOBRIST_PLAYER = np.random.randint(0, (2**63) -1, size=(2), dtype=np.uint64)\nOPENING_BOOK_BLACK = [[8,0,7,0],[6,6,5,6],[8,4,7,4],[8,8,7,8],[6,2,4,0],[7,8,5,6],[4,3,2,5],[8,6,7,6], [5,5,3,7]]",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "CAPTURED_PIECE_OFFSET",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "CAPTURED_PIECE_OFFSET = {WHITE: [(1, 1), (1, -1)], BLACK: [(-1, 1), (-1, -1)]}\nfeature_set1 = {\"FIANCO_BONUS\": 1,\n                \"POSITIONAL_BONUS\": 2,\n                \"SECONDLASTBONUS\": 10,\n                \"THIRDBONUS\": 5}\nnp.random.seed(420)\nZOBRIST_ARRAY = np.random.randint(0, (2**63) -1, size=(BOARD_SIZE, BOARD_SIZE, 2), dtype=np.uint64)\nZOBRIST_PLAYER = np.random.randint(0, (2**63) -1, size=(2), dtype=np.uint64)\nOPENING_BOOK_BLACK = [[8,0,7,0],[6,6,5,6],[8,4,7,4],[8,8,7,8],[6,2,4,0],[7,8,5,6],[4,3,2,5],[8,6,7,6], [5,5,3,7]]",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "feature_set1",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "feature_set1 = {\"FIANCO_BONUS\": 1,\n                \"POSITIONAL_BONUS\": 2,\n                \"SECONDLASTBONUS\": 10,\n                \"THIRDBONUS\": 5}\nnp.random.seed(420)\nZOBRIST_ARRAY = np.random.randint(0, (2**63) -1, size=(BOARD_SIZE, BOARD_SIZE, 2), dtype=np.uint64)\nZOBRIST_PLAYER = np.random.randint(0, (2**63) -1, size=(2), dtype=np.uint64)\nOPENING_BOOK_BLACK = [[8,0,7,0],[6,6,5,6],[8,4,7,4],[8,8,7,8],[6,2,4,0],[7,8,5,6],[4,3,2,5],[8,6,7,6], [5,5,3,7]]",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "ZOBRIST_ARRAY",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "ZOBRIST_ARRAY = np.random.randint(0, (2**63) -1, size=(BOARD_SIZE, BOARD_SIZE, 2), dtype=np.uint64)\nZOBRIST_PLAYER = np.random.randint(0, (2**63) -1, size=(2), dtype=np.uint64)\nOPENING_BOOK_BLACK = [[8,0,7,0],[6,6,5,6],[8,4,7,4],[8,8,7,8],[6,2,4,0],[7,8,5,6],[4,3,2,5],[8,6,7,6], [5,5,3,7]]",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "ZOBRIST_PLAYER",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "ZOBRIST_PLAYER = np.random.randint(0, (2**63) -1, size=(2), dtype=np.uint64)\nOPENING_BOOK_BLACK = [[8,0,7,0],[6,6,5,6],[8,4,7,4],[8,8,7,8],[6,2,4,0],[7,8,5,6],[4,3,2,5],[8,6,7,6], [5,5,3,7]]",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "OPENING_BOOK_BLACK",
        "kind": 5,
        "importPath": "parameters",
        "description": "parameters",
        "peekOfCode": "OPENING_BOOK_BLACK = [[8,0,7,0],[6,6,5,6],[8,4,7,4],[8,8,7,8],[6,2,4,0],[7,8,5,6],[4,3,2,5],[8,6,7,6], [5,5,3,7]]",
        "detail": "parameters",
        "documentation": {}
    },
    {
        "label": "QuiescentEngine",
        "kind": 6,
        "importPath": "quiescentengine",
        "description": "quiescentengine",
        "peekOfCode": "class QuiescentEngine(Engine):\n    def __init__(self,board,player,feature_set = feature_set1,  transposition_table_size = 26) -> None:\n        super().__init__(board,player,feature_set, transposition_table_size)\n        self.bestmoves = []\n        self.null = False\n        self.history_heuristic = defaultdict(int)\n        self.ordered_moves_opponent = None\n        self.turn = 0\n    def negamax(self, depth, alpha, beta, zobrist):\n        ttmove, olda, ttvalue_packed, self.nodes = None, alpha, self.retrieve_tt(zobrist), self.nodes + 1",
        "detail": "quiescentengine",
        "documentation": {}
    },
    {
        "label": "SmartEngine",
        "kind": 6,
        "importPath": "smartengine",
        "description": "smartengine",
        "peekOfCode": "class SmartEngine(Engine):\n    def __init__(self, board, player, feature_set = feature_set1, transposition_table_size=26):\n        super().__init__(board, player, feature_set, transposition_table_size)\n        self.threadkill = False\n        self.backboard = None \n    def negamax_background_id(self, board, max_depth,player, alpha = -1000000, beta= 1000000, window = 1):\n        self.player_at_turn = player\n        initial_a, initial_b, zobrist = alpha, beta, self.board.zobrist_hash(player)\n        generated_moves = self.order_moves(list(self.board.generate_moves(player)))\n        moves = {value: alpha  for value in generated_moves}",
        "detail": "smartengine",
        "documentation": {}
    }
]